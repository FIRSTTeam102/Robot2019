// Hey you! Yes, you! The person trying to edit this file!
// Please make absolutely sure that you know what you're doing before you edit this file!
// If you don't, you might mess up the build system!
// So, please, err on the side of caution.

// This will apply all our plugins
plugins {
	id "java"
	id "eclipse"
	id "edu.wpi.first.GradleRIO" version "2019.1.1"
	id "com.snobot.simulator.plugin.SnobotSimulatorPlugin" version "2019-0.2.0" apply false
}

// Acquire access to the FRC repository
repositories {
	maven {
		url "http://first.wpi.edu/FRC/roborio/maven/release/"
	}
}

// This will warn the user if the robot class named isn't present.
build {
	// We'll execute before the build
	doFirst {
		checkForRobotClass()
	}
}

void checkForRobotClass() {
	def hasRobotClass = false
	
	def robotClassPathElements = ROBOT_CLASS.split("\\.")
	robotClassPathElements[robotClassPathElements.length - 1] += ".java"
	
	for(srcDir in sourceSets.main.allJava.srcDirs) {
		def currFile = srcDir
		
		for(String pathElement : robotClassPathElements) {
			def nextFile = file("${currFile.absolutePath}/${pathElement}")
			
			if(!nextFile.exists()) {
				currFile = null
				break
			} else {
				currFile = nextFile
			}
		}
		
		if(currFile != null) {
			hasRobotClass = true
			
			println "Robot class: ${currFile.absolutePath}"
			println ""
		}
	}
	
	if(!hasRobotClass) {
		throw new InvalidUserDataException("Error: Robot class doesn't exist! Maybe you spelled the name wrong?")
	}
}

// This defines how we deploy
deploy {
	// We only need to deploy to one RoboRIO, which is just a normal RoboRIO, with out team name.
	targets {
		roboRIO("roborio") {
			team = 102
		}
	}
	
	// We want to make a normal FRC-compatible Jar file for our RoboRIO.
	artifacts {
		frcJavaArtifact("frcJava") {
			targets << "roborio"
			debug = false
		}
		
		fileTreeArtifact("frcStaticFileDeploy") {
			files = fileTree(dir: "src/main/deploy")
			
			targets << "roborio"
			directory = "/home/lvuser/deploy"
		}
	}
}

// Add the simulator stuff
apply plugin: com.snobot.simulator.plugin.SnobotSimulatorPlugin
configurations {
	snobotSimCompile
	dummyDownloadConfig
}

// Add all our dependencies, including the ones that are locally stored in vender drops
dependencies {
	// WPILib and friends
	compile wpi.deps.wpilib()
	compile wpi.deps.vendor.java()
	nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
	nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)
	
	// Vendor libraries
	compile files(
		fileTree(System.properties["frcMavenDir"]).exclude {
			it.file.absolutePath.endsWith(".pom") ||
			it.file.absolutePath.endsWith(".xml")
		}
	)
	
	// Simulator
	snobotSimCompile snobotSimJava()
	
	// Get the OpenCV Java dependency
	def openCVJavaDep = project.configurations.compile.allDependencies.matching { it.name.contains("opencv") }.getAt(0)
	def cscoreJavaDep = project.configurations.compile.allDependencies.matching { it.name.contains("cscore") }.getAt(0)
	
	["windowsx86-64", "linuxx86-64", "osxx86-64"].forEach { // Supported platforms: Windows, Linux, and Mac (64 bit only for each of them)
		dummyDownloadConfig "${openCVJavaDep.group}:opencv-jni:${openCVJavaDep.version}:${it}"
		dummyDownloadConfig "${cscoreJavaDep.group}:cscore-jni:${cscoreJavaDep.version}:${it}"
	}
	
	compile "${openCVJavaDep.group}:opencv-cpp:${openCVJavaDep.version}"
}

runJavaSnobotSim {
	doFirst {
		checkForRobotClass()
		
		def simConfigDir = "simulator_config"
		mkdir simConfigDir
		
		def simConfigFile = file("${simConfigDir}/simulator_config.properties")
		delete simConfigFile
		
		simConfigFile << "robot_type=java\n"
		simConfigFile << "simulator_config=${simConfigDir}/simulator_config.yml\n"
		simConfigFile << "robot_class=${ROBOT_CLASS}\n"
		
		def home = System.properties["user.home"].replace("\\", "/")
		if(!home.endsWith("/")) {
			home += "/"
		}
		
		def nativesDir = file("${home}.wpilib/nativecache/windows/x86-64")
		def libDir = file("${buildDir}/tmp/snobotSimJava")
		
		copy {
			from fileTree(nativesDir).getFiles()
			into libDir
			
			rename {
				it.substring(0, it.lastIndexOf("."))
			}
		}
		
		println project.configurations.compile.allDependencies.matching { it.name.contains("opencv-cpp") }.getAt(0).getAllModuleArtifacts()
	}
}

// Create a Fat Jar (all dependencies contained within), also including the manifest
jar {
	from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
	manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_CLASS)
}